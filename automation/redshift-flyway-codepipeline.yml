AWSTemplateFormatVersion: "2010-09-09"
Description: Automate provisioning of CodeBuild with CodePipeline CodeCommit and Codebuild
Parameters:
  RedshiftClusterName:
    Description: The name of the first cluster to be created when the cluster is created.
    Type: String
    Default: "clirscluster"
    AllowedPattern: '([a-z]|[0-9])+' 
  RedshiftDatabaseName:
    Description: The name of the first database to be created when the cluster is created.
    Type: String
    Default: "clirsdb"
    AllowedPattern: '([a-z]|[0-9])+' 
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: dc2.large
    AllowedValues:
      - dc2.large
      - dc2.8xlarge
      - ds2.xlarge
      - ds2.8xlarge
  MasterUsername:
    Description: The user name that is associated with the master user account for the RedShift cluster that is being created.
    Type: String
    Default: rsadmin
    AllowedPattern: '([a-z])([a-z]|[0-9])*'
    ConstraintDescription: must start with a-z and contain only a-z or 0-9.
  MasterUserPassword:
    Description: The password that is associated with the master user account for the RedShift cluster that is being created.
    Type: String
    Default: Password1
    ConstraintDescription: Must be between 8 and 64 characters in length. Must contain at least one uppercase letter. Must contain at least one lowercase letter. Must contain one number.
  RepositoryName:
    Type: String
    Description: "Name of the Repository in CodeCommit"
    Default: sqlddls 
  RepositoryBranch:
    Type: String
    Default: main
  SecretsManagerCICDUserSecretName:
    Type: String
    Description: The name of the Redshift CICD user secret name
    Default: redshift/redshiftcicd/user
  FlywayArtifactsS3BucketName:
    Type: String
    Default: flyway-artefact-bucket-dev
  RedshiftSchemaName:
    Type: String
    Description: Redshift db schema name
    Default: poc_flyway
  RedshiftCICDUserName:
    Type: String
    Description: Redshift database cicd user Name
    Default: cicduser
  ApproversForReshiftCICDCodePipelines:
    Description: Email ID of Approver of change request
    Type: 'String'
  tagEnvName:
    Description: Name of the environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - preprod
      - prod
Resources: 
  RedshiftCluster: 
    Type: "AWS::Redshift::Cluster"
    Properties:
      ClusterIdentifier: !Ref RedshiftClusterName
      DBName: !Ref RedshiftDatabaseName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      NodeType: !Ref NodeType
      ClusterType: "single-node"
      IamRoles:
        - !GetAtt RedShiftIAMServiceRole.Arn
  kmsIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: kms
            Effect: Allow
            Action:
              - kms:*
            Resource: "*"
  RedShiftIAMServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: IAMServiceRole-RedShift
      Description: 'Please do not manually edit this role since it is created via cloudformation.'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess       
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess 
        - !Ref kmsIAMManagedPolicy  
  RedshiftCodeBuildIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Resource: 
              - !Join
                - ""
                - - !GetAtt
                    - S3Bucket
                    - Arn
              - !Join
                - ""
                - - !GetAtt
                    - S3Bucket
                    - Arn
                  - /*
              - !Sub arn:aws:s3:::${FlywayArtifactsS3BucketName}
              - !Sub arn:aws:s3:::${FlywayArtifactsS3BucketName}/*
          - Effect: Allow
            Action:
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
              - ec2:DescribeSubnets
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:CreateNetworkInterface
              - ec2:CreateNetworkInterfacePermission
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: 
              - !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerCICDUserSecretName}-*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - codecommit:GitPull
              - codecommit:GitPush
            Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}  
          - Effect: Allow
            Action:
              - redshift:CreateClusterSnapshot
            Resource: "*"  
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:GetLifecyclePolicy
              - ecr:GetLifecyclePolicyPreview
              - ecr:ListTagsForResource
              - ecr:DescribeImageScanFindings
              - ecr:StartImageScan
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:PutImage
            Resource: "*"  
  RedshiftCodeBuildIAMServiceRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - S3Bucket    
    Properties:
      Description: 'Please do not manually edit this role since it is created via cloudformation.'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref RedshiftCodeBuildIAMManagedPolicy
  RedshiftCodePipelineIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Resource:
              - !Join
                - ""
                - - !GetAtt
                    - S3Bucket
                    - Arn
              - !Join
                - ""
                - - !GetAtt
                    - S3Bucket
                    - Arn
                  - /*        
              - !Sub arn:aws:s3:::${FlywayArtifactsS3BucketName}
              - !Sub arn:aws:s3:::${FlywayArtifactsS3BucketName}/*                   
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
          - Effect: Allow
            Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
            Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}
          - Effect: Allow
            Action:
              - sns:publish
            Resource:
              - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:redshift-cicd-codepipeline-topic
  RedshiftCodePipelineIAMServiceRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - S3Bucket  
    Properties:
      Description: 'Please do not manually edit this role since it is created via cloudformation.'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref RedshiftCodePipelineIAMManagedPolicy       
  RedshiftCICDCodePipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: RedshiftCICDCodePipelineSNSTopic
      TopicName: redshift-cicd-codepipeline-topic
      KmsMasterKeyId:
                "Fn::Join":
                  - ":"
                  - - "arn:aws:kms"
                    - Ref: "AWS::Region"
                    - Ref: "AWS::AccountId"
                    - "alias/aws/sns"      
      Subscription:
        - Endpoint: !Select [0, !Split [",", !Ref ApproversForReshiftCICDCodePipelines]]
          Protocol: email
  SnsTopicPolicyCodePipelineApprover:
    DependsOn:
      - RedshiftCICDCodePipelineSNSTopic
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:redshift-cicd-codepipeline-topic
      PolicyDocument:
        Statement:
          - Sid: SNSPublishGrantforEvents
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: "*"
  RedshiftCreateFlywayDockerImageCodePipeline:
    DependsOn:
      - RedshiftCluster
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: "Redshift-CreateFlywayDockerImagePipeline"
      RoleArn: !GetAtt RedshiftCodePipelineIAMServiceRole.Arn
      ArtifactStore: 
        Location: !Ref S3Bucket
        Type: "S3"
      Stages: 
        - Name: "Source"
          Actions: 
            - Name: "Source"
              ActionTypeId: 
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              Configuration: 
                BranchName: !Ref RepositoryBranch
                PollForSourceChanges: "false"
                RepositoryName: !Ref RepositoryName
              InputArtifacts: [
                ]
              OutputArtifacts: 
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 1
        - Name: "Build"
          Actions: 
            - Name: "Build"
              ActionTypeId: 
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration: 
                ProjectName: !Ref RedshiftCreateFlywayDockerImageCodeBuild
              InputArtifacts: 
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              OutputArtifacts: 
                - Name: !Join
                  - '-'
                  - - !Ref 'AWS::StackName'
                    - BuildArtifact
              Region: !Ref AWS::Region
              RunOrder: 1
  RedshiftCreateFlywayDockerImageCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: CreateFlywayDockerImage-build-project      
      ServiceRole: !GetAtt RedshiftCodeBuildIAMServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: !Ref RepositoryName
          StreamName: "flyway"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FlywayDockerImageECRRepository}
            Type: PLAINTEXT  
          - Name: ECR_REPOSITORY_NAME
            Value: !Sub ${FlywayDockerImageECRRepository}
            Type: PLAINTEXT
          - Name: FLYWAY_ARTIFACTS_S3BUCKET_NAME
            Value: !Ref FlywayArtifactsS3BucketName
            Type: PLAINTEXT       
      Cache:
        Type: LOCAL
        Modes: 
          - LOCAL_DOCKER_LAYER_CACHE
      Source: 
        GitCloneDepth: 1
        Type: "CODEPIPELINE"
        BuildSpec: ./automation/buildspec.yml        
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
  RedshiftFlywaySchemaDeploymentCodePipeline:
    DependsOn:
      - RedshiftCluster
      - RedshiftCreateFlywayDockerImageCodePipeline
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: "RedshiftFlywaySchemaDeploymentCodePipeline"
      RoleArn: !GetAtt RedshiftCodePipelineIAMServiceRole.Arn
      ArtifactStore: 
        Location: !Ref S3Bucket
        Type: "S3"
      Stages: 
        - Name: "Source"
          Actions: 
            - Name: "Source"
              ActionTypeId: 
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeCommit"
                Version: "1"
              Configuration: 
                BranchName: !Ref RepositoryBranch
                PollForSourceChanges: "false"
                RepositoryName: !Ref RepositoryName
              OutputArtifacts: 
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 1
        - Name: "SQLScriptsMigrationToRedshiftSchema"
          Actions: 
            - Name: "VerifySQLScripts"
              ActionTypeId: 
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration: 
                ProjectName: !Ref RedshiftFlywayVerifySQLScriptsCodebuild
                EnvironmentVariables: !Sub '[{"name":"SM_REDSHIFT_CICDUSER_SECRET","value":"${SecretsManagerCICDUserSecretName}","type":"PLAINTEXT"},{"name":"SCHEMA_NAME","value":"${RedshiftSchemaName}","type":"PLAINTEXT"}]'
              InputArtifacts: 
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 1
            - Name: "ManualApproval"
              ActionTypeId: 
                Category: "Approval"
                Owner: "AWS"
                Provider: "Manual"
                Version: "1"
              Configuration: 
                CustomData: !Sub 'Change in ${tagEnvName} environment source scripts. Please approve/reject the pipeline execution with comments. To review the changes please click on details link in VerifySQLScripts section. On Approving pilepine will create a Redshift cluster snapshot and applies the changes to schema'
                NotificationArn: !Ref RedshiftCICDCodePipelineSNSTopic
              InputArtifacts: []
              OutputArtifacts: []
              Region: !Ref AWS::Region
              RunOrder: 2
            - Name: "CreateRedshiftManualSnapshot"
              ActionTypeId: 
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration: 
                ProjectName: !Ref CreateRedshiftManualSnapshotCodeBuild
                EnvironmentVariables: !Sub '[{"name":"REDSHIFT_CLUSTER_NAME","value":"${RedshiftClusterName}","type":"PLAINTEXT"},{"name":"SCHEMA_NAME","value":"${RedshiftSchemaName}","type":"PLAINTEXT"}]'
              InputArtifacts:
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 3
            - Name: "FlywayDeploySQLScriptChangesToRedshift"
              ActionTypeId: 
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration: 
                ProjectName: !Ref FlywayDeploySQLScriptChangesToRedshiftCodeBuild
                EnvironmentVariables: !Sub '[{"name":"SM_REDSHIFT_CICDUSER_SECRET","value":"${SecretsManagerCICDUserSecretName}","type":"PLAINTEXT"},{"name":"SCHEMA_NAME","value":"${RedshiftSchemaName}","type":"PLAINTEXT"}]'
              InputArtifacts: 
              - Name: !Join
                - '-'
                - - !Ref 'AWS::StackName'
                  - SourceArtifact
              Region: !Ref AWS::Region
              RunOrder: 4    
  RedshiftFlywayVerifySQLScriptsCodebuild:
    DependsOn:
      - RedshiftCluster
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RedshiftFlyway-verify-SQL-Scripts      
      ServiceRole: !GetAtt RedshiftCodeBuildIAMServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: !Ref RepositoryName
          StreamName: "flyway"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FlywayDockerImageECRRepository}:latest
        ImagePullCredentialsType: CODEBUILD
      Cache:
        Type: LOCAL
        Modes: 
          - LOCAL_DOCKER_LAYER_CACHE
      Source: 
        GitCloneDepth: 1
        Type: "CODEPIPELINE"
        BuildSpec: ./automation/flyway-verify-sqlScripts-buildspec.yml        
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480   
  FlywayDeploySQLScriptChangesToRedshiftCodeBuild:
    DependsOn:
      - RedshiftCluster
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RedshiftFlyway-Deploy-SQL-Scripts      
      ServiceRole: !GetAtt RedshiftCodeBuildIAMServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: !Ref RepositoryName
          StreamName: "flyway"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${FlywayDockerImageECRRepository}:latest
        ImagePullCredentialsType: CODEBUILD
      Cache:
        Type: LOCAL
        Modes: 
          - LOCAL_DOCKER_LAYER_CACHE
      Source: 
        GitCloneDepth: 1
        Type: "CODEPIPELINE"
        BuildSpec: ./automation/flyway-deploy-sqlScripts-buildspec.yml     
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480    
  CreateRedshiftManualSnapshotCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Redshift-CreateManualSnapshot-build-project      
      ServiceRole: !GetAtt RedshiftCodeBuildIAMServiceRole.Arn
      Artifacts:
        Type: "CODEPIPELINE"
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: !Ref RepositoryName
          StreamName: "flyway"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: True
      Cache:
        Type: LOCAL
        Modes: 
          - LOCAL_DOCKER_LAYER_CACHE
      Source: 
        GitCloneDepth: 1
        Type: "CODEPIPELINE"
        BuildSpec: ./automation/buildspecCreateSnapshot.yml        
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480       
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID:
                "Fn::Join":
                  - ":"
                  - - "arn:aws:kms"
                    - Ref: "AWS::Region"
                    - Ref: "AWS::AccountId"
                    - "alias/aws/s3"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: Policy1504640911349
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: !Join
              - ""
              - - !GetAtt
                  - S3Bucket
                  - Arn
                - /*
            Condition:
              Bool:
                "aws:SecureTransport": false   
  FlywayDockerImageECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "flyway-image"
      ImageScanningConfiguration: 
        ScanOnPush: "true"
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: CodeBuildAccess
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'   

  # This is a secret that has its password hardcoded into the template (NOT RECOMMENDED but used for POC purposes)
  SMRedshiftCICDSecret:
    DependsOn: 
      - RedshiftCluster
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Ref SecretsManagerCICDUserSecretName
      SecretString: !Sub '{"username": "${RedshiftCICDUserName}","password":"Password2", "dbname": "${RedshiftDatabaseName}"}'
  SecretRedshiftCluster1Attachment:
    DependsOn: 
      - SMRedshiftCICDSecret
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref SMRedshiftCICDSecret
      TargetId: !Ref RedshiftCluster
      TargetType: AWS::Redshift::Cluster
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RedshiftFlywaySchemaDeploymentCodePipeline ] ] 
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RepositoryName ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref RepositoryBranch
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RedshiftFlywaySchemaDeploymentCodePipeline ] ]
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-RedShiftPipeline